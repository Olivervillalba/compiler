import composeSourcemaps from '../../utils/compose-sourcemaps'
import generateSourcemap from './generate-css-source-map'
import getPreprocessorTypeByAttribute from '../../utils/get-preprocessor-type-by-attribute'
import mergeOutputChunks from '../../utils/merge-output-chunks'
import minifyString from '../../utils/minify-string'
import preprocess from '../../utils/preprocess-node'

const CSS_EXPORT_PREFIX = 'export const css = `'
const CSS_EXPORT_POSTFIX = '`;\n'

/**
 * Wrap the generate css code
 * @param   { string } code - generated css
 * @returns { string } compiler output
 */
function wrapOutput(code) {
  return `${CSS_EXPORT_PREFIX}${minifyString(code)}${CSS_EXPORT_POSTFIX}`
}


/**
 * Generate the component css
 * @param   { Object } sourceNode - node generated by the riot compiler
 * @param   { string } source - original component source code
 * @param   { Object } options - user options
 * @param   { Output } output - current compiler output
 * @returns { Promise<Output> } - enhanced output with the result of the current generator
 */
export default async function css(sourceNode, source, options, { code, map }) {
  const preprocessorName = getPreprocessorTypeByAttribute(sourceNode)
  const cssNode = sourceNode.text
  const sourcemap = generateSourcemap(source, cssNode, options.file, {
    line: 1,
    column: CSS_EXPORT_PREFIX.length
  })

  const preprocessorOutput = await preprocess('css', preprocessorName, options, source, cssNode)
  const output = {
    code: wrapOutput(preprocessorOutput.code),
    map: preprocessorOutput.map ?
      composeSourcemaps(preprocessorOutput.map, sourcemap) :
      sourcemap
  }

  return mergeOutputChunks(output, { code, map })
}