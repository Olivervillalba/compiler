import {IMPORT_DECLARATION, JS_EXPORT} from './constants'
import getPreprocessorTypeByAttribute from '../../utils/get-preprocessor-type-by-attribute'
import mergeOutputChunks from '../../utils/merge-output-chunks'
import preprocess from '../../utils/preprocess-node'
import recast from 'recast'

/**
 * Find all the import statements
 * @param   { Array } ast - tree structure containing the program code
 * @returns { Array } array containing only the import statements
 */
function findImports(ast) {
  return ast.filter(node => node.type === IMPORT_DECLARATION)
}

/**
 * Get the body of the AST structure
 * @param   { Object } ast - ast object generated by recast
 * @returns { Array } array containing the program code
 */
function getProgramBody(ast) {
  return ast.program.body
}

/**
 * Generate the component javascript logic
 * @param   { Object } sourceNode - node generated by the riot compiler
 * @param   { string } source - original component source code
 * @param   { Object } options - user options
 * @param   { Output } output - current compiler output
 * @returns { Promise<Output> } - enhanced output with the result of the current generator
 */
export default async function javascript(sourceNode, source, options, { code, map }) {
  const preprocessorName = getPreprocessorTypeByAttribute(sourceNode)
  const javascriptNode = sourceNode.text
  const preprocessorOutput = await preprocess('js', preprocessorName, options, source, javascriptNode)
  const outputAST = recast.parse(JS_EXPORT)
  const sourceAST = recast.parse(preprocessorOutput.code)

  // move the imports to the top of the output
  outputAST.program.body = [
    ...findImports(getProgramBody(sourceAST)),
    ...getProgramBody(outputAST)
  ]

  return mergeOutputChunks(recast.prettyPrint(outputAST), { code, map })
}